#!/usr/bin/python

'''
Tool for interacting with the VMWare API,
allowing basic operations in VSphere such as:
* List VMs
* Provision VMs by cloning VM templates
* Booting VMs
* Reporting VM information
* List VMWare resource pools
'''

from pysphere import MORTypes, VIServer, VITask, VIProperty, VIMor, VIException
from pysphere.vi_virtual_machine import VIVirtualMachine
import getpass
import argparse
import re
import ssl


def vprint(verbose, *message):

    '''Print verbose messages'''

    if verbose:
        # message converted to string with tuple formatting stripped
        message = str(message)
        print message.strip('\'(),')


def process_args():

    '''Parse command line arguments'''

    parser = argparse.ArgumentParser(description='VMware command line tools')

    # global args
    parser.add_argument('--domain', default='virginam')
    parser.add_argument('-u', help='username', dest='username',
                        required=True)
    parser.add_argument('-s', help='vcenter server',
                        dest='server', default='vcenter-sc9')
    parser.add_argument('-p', dest='password', help='vcenter password')
    parser.add_argument('-v', dest='verbose', action='store_true',
                        help='show verbose output')

    # sub-command "list"
    subparsers = parser.add_subparsers(dest="subparser_name")

    parser_list = subparsers.add_parser('list')
    parser_list.add_argument('--cluster', help='vmware cluster')
    parser_list.add_argument('--datacenter', help='vmware datacenter')
    parser_list.add_argument('--name', help='vm name', required=False)
    parser_list.add_argument('-d', dest='detailed_list', action='store_true',
                             help='print detailed list', required=False)
    parser_list.add_argument('-I', dest='regex_pattern',
                             help='vm regular expression search pattern')
    parser_list.add_argument('-t', dest='template_only', action='store_true',
                             help='only list vm templates')

    # sub-command "provision"
    parser_provision = subparsers.add_parser('provision')
    parser_provision.add_argument('--source', help='source vm to clone '
                                  'from', required=True)
    parser_provision.add_argument('--name', help='name of vm to provision')
    parser_provision.add_argument('-r', dest='resource_pool',
                                  help='resource pool',  required=True)
    parser_provision.add_argument('-n', dest='num', type=int,
                                  help='number of vms to provision')

    # sub-command "get_resource_pools"
    parser_lsrps = subparsers.add_parser('lsrps')
    # parser_lsrps.add_argument('-r', dest='list', help='list resource pools')

    # sub-command "report"
    parser_report = subparsers.add_parser('report')
    parser_report.add_argument('--name', help='name of vm')

    # sub-command "getmac"
    parser_getmac = subparsers.add_parser('getmac')
    parser_getmac.add_argument('--name', help='name of vm')

    args = parser.parse_args()

    # Return args for: list subcommand
    if args.subparser_name == "list":
        return (args.subparser_name,
                args.domain,
                args.username,
                args.server,
                args.verbose,
                args.cluster,
                args.datacenter,
                args.name,
                args.regex_pattern,
                args.template_only,
                args.detailed_list)


    # Return args for: provision subcommand
    if args.subparser_name == "provision":
        return (args.subparser_name,
                args.domain,
                args.username,
                args.server,
                args.verbose,
                args.source,
                args.name,
                args.resource_pool,
                args.num)

    # Return args for: rpslist
    if args.subparser_name == "lsrps":
        return (args.subparser_name,
                args.domain,
                args.username,
                args.server,
                args.verbose)

    # Return args for: report subcommand
    if args.subparser_name == "report":
        print "selected", args.subparser_name
        return args.subparser_name, args.name

    # Return args for: getmac subcommand
    if args.subparser_name == "getmac":
        print "selected", args.subparser_name
        return args.subparser_name, args.name


def get_password(username, domain):
    pw = getpass.getpass('vCenter password for %s\%s: ' % (domain, username))
    username = domain + '\\' + username
    return username, domain, pw


def vcenter_connect(server, user, password, request, source_vm=None, target_vm=None, res_pool=None, num=1):

    vcenter = VIServer()

    # Establish server connection, allowing untrusted ssl connection
    ssl._create_default_https_context = ssl._create_unverified_context
    vcenter.connect(server, user, password)

    if request == "get_vm_by_name":
        response = vcenter.get_vm_by_name(source_vm)

    if request == "get_resource_pools":
        rps_list = []
        rps = vcenter.get_resource_pools()
        for mor, path in rps.iteritems():
            rps_list.append(path)
        response = rps_list

    if request == "get_registered_vms":
        response = vcenter.get_registered_vms()

    if request == "clone_vm":
        response = None

        rps = vcenter.get_resource_pools()
        for mor, path in rps.iteritems():
            if re.match('.*%s' % res_pool, path):
                resource_pool_id = mor

        print "Using resource_pool_id: ", resource_pool_id

        vm_template = vcenter.get_vm_by_name(source_vm)
        print "init vm_template: ", vm_template

        print "clone source: %s, clone target: %s" % (source_vm, target_vm)
        clone = vm_template.clone(target_vm, True, None, resource_pool_id, None, None, False)
        print "done."

    vcenter.disconnect
    return response


def find_vm(user, domain, password, server, name):

    vcenter_request = "get_vm_by_name"
    # user, domain, password = get_password(user, domain)

    try:
        vm = vcenter_connect(server, user, password, vcenter_request, name)
        return vm
    except VIException:
        return None


def vm_list(domain,
         username,
         server,
         verbose,
         cluster,
         datacenter,
         name,
         regex,
         template_only,
         detailed_list):

    vprint(verbose, "Connecting to %s as %s%s" % (server, domain, username))

    user, domain, password = get_password(username, domain)

    vcenter_request = "get_registered_vms"
    vmlist = vcenter_connect(server, user, password, vcenter_request)

    if template_only is True:
        vm_type = "vmtx"
        print "\nVirtual machine templates found:",
    else:
        vm_type = "vmx"
        print "\nVirtual machines found:",

    vmlist_filtered = []

    if not detailed_list:
        for vm in vmlist:
            vm = vm.strip()
            if vm_type == "vmx":
                vm = str(re.findall("(?<=/).+(?=\.vmx)", vm))
            if vm_type == "vmtx":
                vm = str(re.findall("(?<=/).+(?=\.vmtx)", vm))

            # Strip unwanted characters then match real host names only
            vm = vm.strip('[]\'')
            if re.match('[a-zA-Z]', vm):
                vmlist_filtered.append(vm)

        print str(len(vmlist_filtered)) + '\n'
        for vm in sorted(vmlist_filtered):
            print "  " + vm

    else:
        vmlist_detailed = []
        for vm in vmlist:
            vm = vm.strip()
            if vm_type == "vmx":
                vm = str(re.findall(".*\.vmx", vm))
            if vm_type == "vmtx":
                vm = str(re.findall(".*\.vmtx", vm))

            if re.match('.*[a-zA-Z]', vm):
                vmlist_detailed.append(vm)

        print str(len(vmlist_detailed)) + '\n'
        for vm in sorted(vmlist_detailed):
            print "  " + vm


def provision(domain, username, server, verbose, source, name, res_pool, num):

    # Verify the source template exists
    username, domain, password = get_password(username, domain)
    template_vm = find_vm(username, domain, password, server, source)

    if template_vm is None:
        print 'ERROR: Source vm template %s not found' % (source)
        exit(1)
    print 'Template %s found' % (template_vm)

    vcenter_request = "clone_vm"

    vcenter_connect(server, username, password, vcenter_request, source, name, res_pool, num)

def lsrps(domain, username, server, verbose):

    vcenter_request = "get_resource_pools"

    username, domain, password = get_password(username, domain)
    resource_pools = vcenter_connect(server, username, password, vcenter_request)

    for res_pool in resource_pools:
        print res_pool

def main():
    args = process_args()

    # Call the core functions for each subcommand

    if args[0] == "list":
        vm_list(domain=args[1],
             username=args[2],
             server=args[3],
             verbose=args[4],
             cluster=args[5],
             datacenter=args[6],
             name=args[7],
             regex=args[8],
             template_only=args[9],
             detailed_list=args[10])

    if args[0] == "provision":
        provision(domain=args[1],
             username=args[2],
             server=args[3],
             verbose=args[4],
             source=args[5],
             name=args[6],
             res_pool=args[7],
             num=args[8])

    if args[0] == "lsrps":
        lsrps(domain=args[1],
             username=args[2],
             server=args[3],
             verbose=args[4])


    # if args[0] == "report":
    # if args[0] == "getmac":


if __name__ == '__main__':
    main()
